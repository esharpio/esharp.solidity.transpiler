using System;
using System.Collections.Generic;
using System.IO;

namespace esharp.solidity.transpiler
{
    public class Transpiler
    {
        private readonly string _file;

        private readonly string[] _source;

        public IList<String> Lines { get; private set; }

        public Type Type { get; set; }

        public Transpiler(String filePath)
        {
            // todo: set solidity version
            if (File.Exists(filePath))
            {
                _file = File.ReadAllText(filePath);
                var source = new FileInfo(filePath);

                // check source extension is .es
                if (source.Extension != ".es")
                {
                    throw new Exception("Source file must have .es extension");
                }
            }
            else
            {
                throw new FileNotFoundException(filePath);
            }
        }

        public Transpiler(string source, UInt16 solidtyVersion = 8)
        {
            if (!File.Exists(source))
            {
                throw new FileNotFoundException("File not found", source);
            }

            _source = File.ReadAllLines(source);
            Lines = new List<String>();

            Lines.Add("// SPDX-License-Identifier: Unlicense");
            Lines.Add("// Generated by esharp.solidity.transpiler");
            Lines.Add(String.Format("pragma solidity ^0.{0}.0;", solidtyVersion));
        }

        public Boolean Transform()
        {
            this.Type = Type.Contract;
            return true;
        }

        public void TransformLicence()
        {
            throw new NotImplementedException();
        }

        public void TransformImports()
        {
            foreach (string line in _source)
            {
                if (line.StartsWith("using") && line.EndsWith(";"))
                {
                    string result = line.Replace("using", "import");
                    result = result.Replace(".es", ".sol");
                    Lines.Add(result);
                }
            }
        }

        public void TransformContract()
        {
            foreach (string line in _source)
            {
                if (line.Contains("contract"))
                {
                    Lines.Add("contract {");
                    Lines.Add("}");
                }
            }
        }

        public void TransformInterface()
        {
            foreach (string line in _source)
            {
                if (line.Contains("interface"))
                {
                    Lines.Add(line);
                }
            }
        }

        public void TransformLibrary()
        {
            foreach (string line in _source)
            {
                if (line.Contains("library"))
                {
                    Lines.Add(line);
                }
            }
        }

        public void TransformPropertyGetter()
        {
            
        }

        public void TransformFunction(string[] lines)
        {
            
        }

        public void AddLicense()
        {

        }

        public void AddModifier()
        {
            // [OnlyOwner]
        }
    }
}
